@using CompanionAppShared.Therapies;
@inject DataBaseConnector.DataBase DB

<div class="d-flex gap-0 h-100 overflow-auto">
	<div class="LeftColumMenu DarkBackground">
		<div class="Header">
			<h1 class="mb-0">@PatientToEdit.PatientLabel</h1>
			<h2 class="ms-0">Parkinson</h2>
		</div>
		<div class="flex-grow-1 d-flex flex-column gap-2 justify-content-center align-items-end m-2 p-4">
			<div class="MenuSection @(CurrentPage == Pages.PatientInfo?"Active":"")" @onclick=@(()=>{CurrentPage = Pages.PatientInfo;})>
				@if(string.IsNullOrEmpty(PatientToEdit.PatientLabel))
				{
					<RXIcon IconName="RXIcon.Icons.Cancel" Color="Colors.red"/>
				}
				else
				{
					<RXIcon IconName="RXIcon.Icons.Tick" Color="Colors.green" />
				}
				Patient details
			</div>
			<div class="MenuSection @(CurrentPage == Pages.ExclusionInclusion?"Active":"")" @onclick=@(()=>{CurrentPage = Pages.ExclusionInclusion;})>
				@if (PatientToEdit.Therapies.Count != 0 && !PatientToEdit.Therapies[0].AreAllCriteriaMeet)
				{
					<RXIcon IconName="RXIcon.Icons.Cancel" Color="Colors.red" />
				}
				else
				{
					<RXIcon IconName="RXIcon.Icons.Tick" Color="Colors.green" />
				}
				Inclusion / exclusion criteria
			</div>
		</div>
		<div class="Header gap-2">
			<RoundButton Title="Revert changes" ButtonColor="Colors.red" 
				ButtonStyle="RoundButton.ButtonStyles.outlined" 
				Icon=RXIcon.Icons.Revert
				Clicked="RevertChanges"/>
			<RoundButton Title="Delete patient" ButtonColor="Colors.red" 
				ButtonStyle="RoundButton.ButtonStyles.solid" 
				Icon=RXIcon.Icons.Bin
				Clicked="Delete"/>
			<RoundButton Title="@SaveButtonText"
						 ButtonColor="Colors.green" 
				ButtonStyle="RoundButton.ButtonStyles.solid" 
				Icon=RXIcon.Icons.Save IsEnabled=@IsPatientReady
				Clicked="Save"/>
		</div>
	</div>
	@if(CurrentPage == Pages.PatientInfo){
		<div class="d-flex flex-column w-100 h-100">
			<EditForm Model="PatientToEdit" style="width: 100%; display: flex; align-items: center; flex:1;">
				<div class="d-flex gap-0 flex-grow-1">
					<div class="FormColumn BlueBar">
						<div class="d-flex flex-column">
							<label>Patient label</label>
							<InputText class="form-control" @bind-Value=@PatientToEdit.PatientLabel></InputText>
						</div>
						<div class="d-flex flex-column">
							<label>Sex</label>
							<InputSelect class="form-control" @bind-Value=@PatientToEdit.Sex>
								@foreach (var op in Enum.GetValues(typeof(AvailbleSex)))
								{
									<option value="@op">@op</option>
								}
							</InputSelect>
						</div>
						<div class="d-flex flex-column">
							<label>Birthdate <small style="opacity: 0.5;">mm/dd/yyyy</small></label>
							<InputDate class="form-control"
							@bind-Value=@PatientToEdit.BirthDate
							@bind-Value:culture=@GermanCulture
							@bind-Value:format="dd/MM/yyyy"></InputDate>
						</div>
						<div class="d-flex flex-column">
							<label>Diagnosis</label>
							<InputText class="form-control" @bind-Value=@PatientToEdit.Diagnosis></InputText>
						</div>
						<div class="d-flex flex-column">
							<label>Date of diagnosis</label>
							<InputDate class="form-control" @bind-Value=@PatientToEdit.DateOfDiagnosis @bind-Value:format="dd/MM/yyyy"></InputDate>
						</div>
						<div class="d-flex flex-column">
							<label>Starting date in the study</label>
							<InputDate class="form-control" @bind-Value=@PatientToEdit.StartingDateForStudy @bind-Value:format="dd/MM/yyyy"></InputDate>
						</div>
					</div>
					<div class="FormColumn BlueBar">
						<div class="d-flex flex-column">
							<label>Is already on a rehabilitation plan?</label>
							<InputSelect class="form-control" @bind-Value=@IsPatientOnTherapy>
								@foreach (var op in Enum.GetValues(typeof(YesNo)))
								{
									<option value="@op">@op</option>
								}
							</InputSelect>
						</div>
						@if (PatientToEdit.AlreadyInRehabTherapy)
						{
							<div class="d-flex flex-column">
								<label>Details for the rehabilitation therapy</label>
								<InputTextArea class="form-control" @bind-Value=@PatientToEdit.RehabTherapyDetails></InputTextArea>
							</div>
						}
						<div class="d-flex flex-column">
							<label>Medications in use</label>
							<InputText class="form-control" @bind-Value=@PatientToEdit.MedicationInUse></InputText>
						</div>
						<div class="d-flex flex-column">
							<label>Notes</label>
							<InputTextArea class="form-control" @bind-Value=@PatientToEdit.Notes></InputTextArea>
						</div>
					</div>
					<div class="FormColumn"></div>
				</div>
			</EditForm>
			<div class="w-100 d-flex justify-content-end p-4">
				<RoundButton Title="Inclusion / exclusion" 
					ButtonColor="Colors.green" 
					Icon="RXIcon.Icons.Next"
					ButtonStyle="RoundButton.ButtonStyles.solid" 
					Clicked="@(()=>{CurrentPage = Pages.ExclusionInclusion;})"/>
			</div>
		</div>
	}
	else if(CurrentPage == Pages.ExclusionInclusion)
	{
		<div class="d-flex flex-column w-100 h-100">
			<div class="d-flex flex-grow-1 overflow-auto">
				<div class="d-flex w-50 flex-column p-5 pe-0 gap-1 h-100">
					<h4>Exclusion criteria <small class="opacity-25 fs-5">(all must be red)</small></h4>
					<div class="d-flex flex-column gap-1 overflow-auto">
						@foreach(var p in PatientToEdit?.Therapies.FirstOrDefault()?.ExclusionCriteria)
						{
							<InclusionExclusionCriteriaViewer Criteria="p"
								UpdateRequested="Update"
								CriteriaType="InclusionExclusionCriteriaViewer.CriteriaTypes.Exclusion"/>
						}
					</div>
				</div>
				<div class="d-flex w-50 flex-column m-5 mb-4 me-4 ps-5">
					<h4>Inclusion criteria <small class="opacity-25 fs-5">(all must be green)</small></h4>
					<div class="d-flex flex-column gap-1 flex-grow-1 overflow-auto">
						@foreach (var p in PatientToEdit?.Therapies.FirstOrDefault()?.InclusionCriteria)
						{
							<InclusionExclusionCriteriaViewer Criteria="p" 
								UpdateRequested="Update"
								CriteriaType="InclusionExclusionCriteriaViewer.CriteriaTypes.Inclusion"/>
						}
					</div>
					<div class="w-100 d-flex justify-content-end p-4 pb-0 pe-0">
						<RoundButton Title="Patient details"
									 ButtonColor="Colors.green"
									 Icon="RXIcon.Icons.Back"
									 ButtonStyle="RoundButton.ButtonStyles.solid"
									 Clicked="@(()=>{CurrentPage = Pages.PatientInfo;})" />
					</div>
				</div>
			</div>
			
		</div>
	}
</div>

@code {
	[Parameter] public Patient PatientToEdit { get; set; } = new();
	[Parameter] public EventCallback ChangesSaved { get; set; }
	[Parameter] public EventCallback PatientDeleted { get; set; }

	enum Pages {PatientInfo, ExclusionInclusion}
	Pages CurrentPage = Pages.PatientInfo;

	enum YesNo {Yes, No};
	Patient Backup;

	bool AreWeCreatingANewPatient = false;

	protected async override Task OnParametersSetAsync()
	{
		if(PatientToEdit is null)
		{
			PatientToEdit = new Patient();
			PatientToEdit.Therapies.Add(new ParkinsonStudy());
			AreWeCreatingANewPatient = true;
		}
		else if(!PatientToEdit.IsFullyLoadedFromDB)
		{
			PatientToEdit = await DB.GetPatient(PatientToEdit.Id) ?? new Patient{ PatientLabel = "Not Found"};
		}

		Backup = PatientToEdit.Clone();
	}

	YesNo IsPatientOnTherapy
	{
		get
		{
			if (PatientToEdit.AlreadyInRehabTherapy) return YesNo.Yes;
			else return YesNo.No;
		}
		set
		{
			var i = Thread.CurrentThread.CurrentUICulture;
			if (value == YesNo.Yes) PatientToEdit.AlreadyInRehabTherapy = true;
			else PatientToEdit.AlreadyInRehabTherapy = false;

		}
	}	

	bool IsPatientReady
	{
		get
		{
			if (string.IsNullOrEmpty(PatientToEdit.PatientLabel)) return false;
			if (PatientToEdit.Therapies.Count == 0) return false;
			if (!PatientToEdit.Therapies.FirstOrDefault().AreAllCriteriaMeet) return false;
			else return true;
		}
	}

	string SaveButtonText
	{
		get
		{
			if (IsPatientReady)
			{
				if (AreWeCreatingANewPatient) return "Save new patient";
				else return "Save changes";
			}
			else
				return "Please finish the formular before saving the changes";
		}		
	}

	private async Task Save()
	{
		if (AreWeCreatingANewPatient)
			await DB.InsertPatient(PatientToEdit);
		else
			await DB.UpdatePatient(PatientToEdit);
		ChangesSaved.InvokeAsync();
	}

	private async Task Delete()
	{
		await DB.DeletePatient(PatientToEdit.Id);
		PatientToEdit = null;
		ChangesSaved.InvokeAsync();
	}

	private void RevertChanges()
	{
		PatientToEdit = Backup.Clone();
	}

	void Update() => InvokeAsync(() => { StateHasChanged(); });
}