@using System.Text.Json;
@inject ScalesService Scales
@inject DataBase DB

<div class="d-flex h-100">
	<div class="DarkBackground LeftColumMenu Animable relative @(IsDarkColumnMinified?"Mini":"")">

		<div class="SwitchDarkColumWidthButton DarkBackground @(IsDarkColumnMinified?"GoLeft":"")" @onclick=@(()=>{IsDarkColumnMinified = !IsDarkColumnMinified;})>
			<i class="bi bi-chevron-compact-@(IsDarkColumnMinified?"right":"left")"></i>
		</div>

		<div class="Header">
			<h1 class="mb-0">@Current.SelectedPatient.PatientLabel</h1>
			<h2 class="ms-0 text-nowrap">@Current.SelectedTherapy.Name</h2>
		</div>
		<div class="flex-grow-1 d-flex flex-column justify-content-center">
			<div style="margin-bottom:50%; overflow:hidden; transition:margin-left linear 0.5s; @(IsDarkColumnMinified?"margin-left:20px;":"")">
				<LeftMenuItem Title="@($"{Current.SelectedSession.MeasurementDate.ToShortDateString()} / {Current.SelectedScale.ShortName} : {LifeCopy.ScoreNormalized}%")"
							  Color="LeftMenuItem.AvailableColors.green"
							  IsSingleItem="true"
							  IsSelected="true" />
			</div>
		</div>
		<div class="ButtonsSpace">
			@if(LifeCopy.HasMissingItems)
			{
				<div class="WarningMessage">
					<div class="d-flex align-items-center">
						<div>
							<i class="bi bi-exclamation-triangle fs-2"></i>
						</div>
						<div class="flex-grow-1 px-2">
							Some questions are not yet answered
						</div>
					</div>
					
					<div class="d-flex flex-column ErrorMessage">
						@foreach(var i in from ScaleItem it in LifeCopy.Items
											where it is ComplexOptionsItem
											select it as ComplexOptionsItem)
						{
							if(i.IsWrong)
							{
								<div class="d-flex align-items-center">
									<i class="bi bi-x"></i>
									<div class="flex-grow-1" style="text-align:left;">@i.Label.ToLowerInvariant()</div>
								</div>
							}
						}
					</div>
				</div>
			}
			
			<RoundButton ButtonColor="Colors.red" ButtonStyle="RoundButton.ButtonStyles.outlined"
						 Icon="RXIcon.Icons.Cancel" Clicked="Cancel"
						 Title="@(CurrentMode == Modes.NewScaleMode?"Delete data and exit":"Revert changes and exit")" />
			
			@if (LifeCopy.IsMeasured)
			{
				<RoundButton ButtonColor="Colors.green" ButtonStyle="RoundButton.ButtonStyles.solid"
							 Icon="RXIcon.Icons.Save" Clicked="Store"
							 Title="Store scale" />
			}
			else
			{
				<RoundButton ButtonColor="Colors.green" ButtonStyle="RoundButton.ButtonStyles.outlined"
							 Icon="RXIcon.Icons.Tick" Clicked="LifeCopy.GenerateScore"
							 Title="Validate score" />
			}
			
		</div>
	</div>
	<div class="MainContainer d-flex flex-grow-1 h-100">
		<div class="FormPanel h-100">
			<div class="FormPanelDiv d-flex flex-column gap-3">
				<div class="d-flex" style="height:80px;">
					<div class="Score">@(LifeCopy.ScoreNormalized)%</div>
					<div class="ScoreComment">score calculated automatically</div>
					@if(IsShowingAutoScoreDetails)
					{
						<div class="AutoScoreExplanation  hoverable" @onclick=@(_ => IsShowingAutoScoreDetails = false)>
							<div>
								@((MarkupString)LifeCopy.AutoScoreExplanation)
							</div>
							<i class="bi bi-x ms-3 hoverable" style="color:black;"></i>
						</div>
					}
					else
					{
						<i class="bi bi-info-circle opacity-25 hoverable" @onclick=@(_ => IsShowingAutoScoreDetails = true)></i>
					}
				</div>
				@foreach (var item in LifeCopy.Items)
				{
					<ScaleItemGenericViewer Item="item" />
				}
			</div>
		</div>
	</div>
</div>


@code {
	[Parameter] public SelectedItems Current { get; set; }
	[Parameter] public EventCallback ExitAutoScale { get; set; }

	bool IsShowingAutoScoreDetails = false;

	bool IsDarkColumnMinified;

	enum Modes {NewScaleMode, EditScaleMode};
	Modes CurrentMode = Modes.NewScaleMode;

	IScale LifeCopy;

	protected override void OnParametersSet()
	{
		var str = JsonSerializer.Serialize(Current.SelectedScale);
		LifeCopy = JsonSerializer.Deserialize<IScale>(str);
		LifeCopy.FixItems(Current.SelectedPatient);
		LifeCopy.FixEvents();

		if (Current.SelectedScale.IsMeasured) 
		{
			CurrentMode = Modes.EditScaleMode;
		}

		LifeCopy.GenerateScore();

		LifeCopy.UpdateNeeded -= Update;
		LifeCopy.UpdateNeeded += Update;
	}

	private void Update(object? sender, EventArgs e) => InvokeAsync(() => StateHasChanged());

	private async Task Cancel()
	{
		if(CurrentMode == Modes.NewScaleMode)
		{
			Current.SelectedScale.Reset();
		}
		else
		{
		}
		await ExitAutoScale.InvokeAsync();
	}

	private async Task Store()
	{
		await DB.UpdateScaleInSession(Current, LifeCopy);
		await ExitAutoScale.InvokeAsync();
	}

	private void ClearScale()
	{
		LifeCopy.Reset();
	}
}
