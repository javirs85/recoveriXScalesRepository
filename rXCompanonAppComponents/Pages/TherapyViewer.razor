@inject DataBase DB;

<PageTitle>Patients list</PageTitle>

<div class="d-flex gap-1 h-100">
	<div class="d-flex flex-column DarkBackground">
		<div class="Header rel">
			<h1 class="mb-0">@Current.SelectedPatient.PatientLabel</h1>
			<h2 class="ms-0">Parkinson</h2>
			<div class="Exit" @onclick=Exit>
				<RXIcon IconName="RXIcon.Icons.Cancel" Color="Colors.white" IconWidth="30"/>
			</div>
		</div>

		<LeftMenuBigList 
			ItemSelected="SessionClick" 
			Mode="LeftMenuBigList.ListingModes.Sessions"
			Sessions="SessionsOnScreen" />

		<div class="ButtonsSpace d-flex flex-column gap-2" style="padding:24px;">
			<RoundButton ButtonColor="Colors.blue"
						 ButtonStyle="RoundButton.ButtonStyles.outlined"
						 Icon="RXIcon.Icons.Edit"
						 Title="Edit patient"
						 ShowPlusSymbol="false"
						 Clicked="EditPatientRequested" />

			<RoundButton ButtonColor="Colors.blue"
						 ButtonStyle="RoundButton.ButtonStyles.solid"
						 Icon="RXIcon.Icons.Scale"
						 Title="Add new session"
						 ShowPlusSymbol="true"
						 Clicked="AddSessionToTherapy" />
		</div>
	</div>
</div>

@code {
	[Parameter] public EventCallback<Session> SessionSelected { get; set; }
	[Parameter] public EventCallback AddSessionToTherapy { get; set; }
	[Parameter] public EventCallback EditPatientRequested { get; set; }
	[Parameter] public EventCallback Exit { get; set; }
	[Parameter]	public SelectedItems Current { get; set; }

	private bool IsSelected(Patient p) => Current.SelectedPatient == p;
	Therapy? SelectedTherapy = null;

	protected override async Task OnParametersSetAsync()
	{
		DB.UIUpdateRequestedFromDB -= Update;
		DB.UIUpdateRequestedFromDB += Update;

		if (!Current.SelectedPatient.IsFullyLoadedFromDB)
			Current.SelectedPatient = await DB.GetPatient(Current.SelectedPatient.Id) ?? new Patient { PatientLabel = "Not Found" };

		SelectedTherapy = Current.SelectedPatient.GetParkinsonTherapy();
	}
	private void Update(object? sender, EventArgs e)
	{
		InvokeAsync(() => { StateHasChanged(); });
	}

	List<Session> SessionsOnScreen
	{
		get
		{
			if (Current.SelectedPatient.HasTherapies)
				return Current.SelectedPatient.GetParkinsonTherapy().Sessions;
			else
				return new List<Session>();
		}
	}

	async Task SessionClick(object o)
	{
		if (o is Session)
		{
			Current.SelectedSession = o as Session;
			Current.SelectedSession = await DB.LoadAllDetailsOfSession(Current.SelectedSession);
			await SessionSelected.InvokeAsync(o as Session);
		}
	}
}
