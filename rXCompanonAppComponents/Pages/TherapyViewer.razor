@inject DataBase DB;

<PageTitle>Patients list</PageTitle>

<div class="d-flex gap-0 h-100">
	<div class="LeftColumMenu d-flex flex-column DarkBackground Animable relative @(IsDarkColumnMinified?"Mini":"")">

		<div class="SwitchDarkColumWidthButton @(IsDarkColumnMinified?"GoLeft":"")" @onclick=@(()=>{IsDarkColumnMinified = !IsDarkColumnMinified;})>
			<i class="bi bi-chevron-@(IsDarkColumnMinified?"right":"left")"></i>
		</div>

		<div class="Header rel" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
			<h1 class="mb-0">@Current.SelectedTherapy?.TherapyLabel</h1>
			<h2 class="ms-0">@Current.SelectedTherapy?.Name</h2>
			@if(!IsDarkColumnMinified)
			{
				<div class="Exit" @onclick=Exit>
					<RXIcon IconName="RXIcon.Icons.Cancel" Color="Colors.white" IconWidth="30"/>
				</div>
			}			
		</div>

		<LeftMenuBigList 
			ItemSelected="SessionClick" 
			Mode="LeftMenuBigList.ListingModes.Sessions"
			Sessions="SessionsOnScreen" />

		<div class="ButtonsSpace">
			@if(CurrentView == CurrentViewOptions.options)
			{
				<RoundButton ButtonColor="Colors.green"
							 ButtonStyle="RoundButton.ButtonStyles.outlined"
							 Title="Show therapy table"
							 Clicked="ShowTherapyTable" />

				<RoundButton ButtonColor="Colors.green"
							 ButtonStyle="RoundButton.ButtonStyles.outlined"
							 Title="Show therapy circles"
							 Clicked="ShowTherapyCircles" />
			}
			else if(CurrentView == CurrentViewOptions.table)
			{
				<RoundButton ButtonColor="Colors.blue"
							 ButtonStyle="RoundButton.ButtonStyles.solid"
							 Icon="RXIcon.Icons.Scale"
							 Title="Add new session"
							 ShowPlusSymbol="true"
							 Clicked="AddSessionToTherapy" />

				<RoundButton ButtonColor="Colors.blue"
							 ButtonStyle="RoundButton.ButtonStyles.outlined"
							 Title="Show therapy circles"
							 Clicked="ShowTherapyCircles" />
			}
			else if(CurrentView == CurrentViewOptions.circles)
			{
				<RoundButton ButtonColor="Colors.blue"
							 ButtonStyle="RoundButton.ButtonStyles.solid"
							 Icon="RXIcon.Icons.Scale"
							 Title="Add new session"
							 ShowPlusSymbol="true"
							 Clicked="AddSessionToTherapy" />

				<RoundButton ButtonColor="Colors.blue"
							 ButtonStyle="RoundButton.ButtonStyles.outlined"
							 Title="Show therapy table"
							 Clicked="ShowTherapyTable" />
			}
			<RoundButton ButtonColor="Colors.blue"
						 ButtonStyle="RoundButton.ButtonStyles.outlined"
						 Icon="RXIcon.Icons.Edit"
						 Title="Edit patient"
						 ShowPlusSymbol="false"
						 Clicked="EditPatientRequested" />

			
		</div>
	</div>
	<div class="d-flex flex-column flex-grow-1 h-100" style="flex:1; overflow:auto;">
		@if(CurrentView == CurrentViewOptions.options)
		{
			<div class="d-flex flex-column h-100 justify-content-center align-items-center gap-2">
				<RoundButton ButtonColor="Colors.blue"
							 ButtonStyle="RoundButton.ButtonStyles.solid"
							 Icon="RXIcon.Icons.Scale"
							 Title="Add new session"
							 ShowPlusSymbol="true"
							 Clicked="AddSessionToTherapy" />

			</div>
		}
		else if (CurrentView == CurrentViewOptions.table)
		{
			<table style ="font-family:Roboto; font-size:18px; font-weight:400;">
				<thead class=" HeaderContainer" style="position:sticky; top:0; z-index:4; box-shadow: 0 0 9px #00000075;">
					<tr>
						<th>
							<div class="tableCellContainer darkened">
								<div class="form-check form-switch" @onclick=@(()=>{IsShowinDetails = !IsShowinDetails;})>
									@if (IsShowinDetails)
									{
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked>
									}
									else
									{
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked">
									}
									<label class="form-check-label" for="flexSwitchCheckChecked">Details</label>
								</div>
							</div>
						</th>
						@foreach(var session in HorizontalAxis)
						{
							<th class="">
								<div class="tableCellContainer" >
									<div>@session.SessionKind.ToString()</div>
									<div class="opacity-25">@session.MeasurementDate.ToShortDateString()</div>
								</div>
								
							</th>
						}
						<th class="ResultMini">
							<div class="tableCellContainer darkenedBeforeLast">
								Result
							</div>
						</th>
						<th class="last">
							<div class="tableCellContainer darkenedLast">
								Evolution
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var scale in VerticalAxis.OrderByDescending(x=>CalculateEvolutionOnScale(x.Id).HasNonPreValues))
					{
						<tr>
							<td style="padding:0;">
								<div class="tableCellContainer darkened py-2">
									<div class="RowHeaderTitle">@scale.ShortName</div>
									<div class="TableCellDetails @(IsShowinDetails?"":"Hide")">
										@foreach (var d in scale.DetailsHeaders)
										{
											<div>@d</div>
										}
									</div>
								</div>
							</td>
							@foreach (var session in HorizontalAxis)
							{
								<td>
									<div class="tableCellContainer">
										@if (GetScale(session.Id, scale.Id) is not null && GetScale(session.Id, scale.Id).IsMeasured)
										{
											<h5>@(GetScale(session.Id, scale.Id)?.ScoreNormalized + "%")</h5>
											<div class="TableCellDetails @(IsShowinDetails?"":"Hide")">
												@foreach (var d in GetScale(session.Id, scale.Id).Details)
												{
													<div>@d</div>
												}
											</div>
										}
									</div>
								</td>
							}
							<td class="ResultMini">
								<div class="tableCellContainer darkenedBeforeLast">
									<ResultLittleArea Value="@CalculateEvolutionOnScale(scale.Id)" />
								</div>
							</td>
							<td class="last">
								<div class="tableCellContainer darkenedLast">
									<LinearResultView Values="@CalculateEvolutionOnScale(scale.Id)" />
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
		else if (CurrentView == CurrentViewOptions.circles)
		{
			<div class="d-flex flex-wrap p-4 gap-4 h-100 overflow-auto">
				@foreach (var sc in VerticalAxis.OrderByDescending(x => CalculateEvolutionOnScale(x.Id).HasNonPreValues))
				{
					<CircularPlot Data="CalculateEvolutionOnScale(sc.Id)" Scale="sc"/>
				}
			</div>
		}
		
	</div>
</div>

@code {
	[Parameter] public EventCallback<Session> SessionSelected { get; set; }
	[Parameter] public EventCallback AddSessionToTherapy { get; set; }
	[Parameter] public EventCallback EditPatientRequested { get; set; }
	[Parameter] public EventCallback Exit { get; set; }
	[Parameter]	public SelectedItems Current { get; set; }

	bool IsDarkColumnMinified = false;
	bool IsShowinDetails = false;
	enum CurrentViewOptions {options, table, circles}
	CurrentViewOptions CurrentView = CurrentViewOptions.options;	


	List<IScale> VerticalAxis = new();
	List<Session> HorizontalAxis = new();

	private bool IsSelected(Patient p) => Current.SelectedPatient == p;
	Therapy? SelectedTherapy = null;

	protected override async Task OnParametersSetAsync()
	{
		DB.UIUpdateRequestedFromDB -= Update;
		DB.UIUpdateRequestedFromDB += Update;
	}
	private void Update(object? sender, EventArgs e)
	{
		InvokeAsync(() => { StateHasChanged(); });
	}

	List<Session> SessionsOnScreen
	{
		get
		{
			if (Current.SelectedPatient.HasTherapies)
				return Current.SelectedPatient.GetParkinsonTherapy().Sessions;
			else
				return new List<Session>();
		}
	}

	async Task SessionClick(object o)
	{
		if (o is Session)
		{
			Current.SelectedSession = o as Session;
			Current.SelectedTherapy.Sessions.Remove(Current.SelectedSession);
			Current.SelectedSession = await DB.UpdateSessionInTherapyWithDetailsFromDB(Current);
			Current.SelectedTherapy.Sessions.Add(Current.SelectedSession);
			await SessionSelected.InvokeAsync(o as Session);
		}
	}

	Session? HoveredSession = null;
	void MouseOver(Session s) => HoveredSession = s;
	void ResetOver() => HoveredSession = null;
	bool IsSessionHovered(Session s) => HoveredSession is not null && HoveredSession == s;


	bool IsFullyLoaded = false;

	async Task ShowTherapyTable()
	{
		await DownloadAxesFromDB();
		CurrentView = CurrentViewOptions.table;
	}

	async Task ShowTherapyCircles()
	{
		await DownloadAxesFromDB();
		CurrentView = CurrentViewOptions.circles;
	}

	async Task DownloadAxesFromDB()
	{
		await DB.LoadAllSessionDetailsInTherapy(Current);

		//horizontal axis
		HorizontalAxis = Current.SelectedTherapy.Sessions.OrderBy(x => x.MeasurementDate).ToList();

		//vertical axis
		foreach (var session in HorizontalAxis)
		{
			foreach (var scale in session.Scales)
			{
				if (VerticalAxis.Find(x => x.Id == scale.Id) is null)
				{
					VerticalAxis.Add(scale);
				}
			}
		}
	}

	IScale? GetScale(Guid SessionID, ScalesIDs id)
	{
		var ses = HorizontalAxis.Find(x => x.Id == SessionID);
		if (ses is null) return null;

		var sc = ses.Scales.Find(x => x.Id == id);
		return sc;
	}

	EvolutionResults CalculateEvolutionOnScale(ScalesIDs id)
	{
		int amount = 0;
		int added = 0;

		var SessionsThatContainScale =  from s in HorizontalAxis
												where s.Scales.Find(sc => sc.Id == id && sc.IsMeasured) is not null
												select s;
		var SessionsPRE =   from s in SessionsThatContainScale
								where s.SessionKind == SessionKinds.Pre
								select s;

		SessionsThatContainScale = SessionsThatContainScale.OrderByDescending(x => x.MeasurementDate);

		foreach (var s in SessionsPRE)
		{
			var sc = s.Scales.Find(x=>x.Id ==id && x.IsMeasured);
			if(sc is not null)
			{
				amount ++;
				added += sc.ScoreNormalized;
			}
		}

		int AveragedPRE = (int)((float)added / (float)amount);
		if (amount == 0)
			AveragedPRE = -1;

		if(SessionsThatContainScale.Count() > 0)
		{
			var Newest = SessionsThatContainScale.First();

			if (Newest.SessionKind == SessionKinds.Pre)
			{
				var result = new EvolutionResults
					{
						InitialPreVale = SessionsPRE.First().Scales.Find(x => x.Id == id).ScoreNormalized,
						LastPreValue = SessionsPRE.Last().Scales.Find(x => x.Id == id).ScoreNormalized,
						HasNonPreValues = false,
						FinalValue = AveragedPRE
					};
				return result;
			}
			else
			{
				var newValue = Newest.Scales.Find(x => x.Id == id).ScoreNormalized; // - AveragedPRE;
				if (AveragedPRE == -1)
					AveragedPRE = newValue;

				var result = new EvolutionResults
					{
						AveragedPreValue = AveragedPRE,
						HasNonPreValues = true,
						FinalValue = newValue
					};
				return result;
			}
		}
		else
		{
			var result = new EvolutionResults
				{
					AveragedPreValue = 0,
					HasNonPreValues = false,
					FinalValue = 0
				};
			return result;
		}

	}

}
